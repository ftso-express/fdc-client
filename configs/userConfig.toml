# options are: "coston", "songbird", "coston2", "flare"
chain = "coston"

protocol_id = 200

[db]
type = "mysql"
host = "localhost"
port = 3306
database = "flare_ftso_indexer"
username = "root"
password = "root"
log_queries = false

[rest_server]
# Addr optionally specifies the FSP client address for the server to listen on, in the form "host:port". If empty, ":http" (port 80) is used. The service names are defined in RFC 6335 and assigned by IANA. See net.Dial for details of the address format.
addr = ":8080"
api_key_name = "X-API-KEY"
api_keys = ["12345", "123456"]
title = "FDC protocol data provider API"
fsp_sub_router_title = "FDC protocol data provider for FSP client"
fsp_sub_router_path = "/fsp"
da_sub_router_title = "DA endpoints"
da_sub_router_path = "/da"
version = "0.0.0"
swagger_path = "/api-doc"

[logger]
file = ""
level = "INFO"
console = true

# Payment
[types.Payment]
abi_path = "configs/abis/Payment.json"

## BTC
[types.Payment.Sources.testBTC]
url = ""
api_key = ""
lut_limit = "1209600"
queue = "btc"

## DOGE
[types.Payment.Sources.testDOGE]
url = ""
api_key = ""
lut_limit = "1209600"
queue = "doge"

## XRP
[types.Payment.Sources.testXRP]
url = ""
api_key = ""
lut_limit = "1209600"
queue = "xrp"

# BalanceDecreasingTransaction
[types.BalanceDecreasingTransaction]
abi_path = "configs/abis/BalanceDecreasingTransaction.json"

## BTC
[types.BalanceDecreasingTransaction.Sources.testBTC]
url = ""
api_key = ""
lut_limit = "1209600"
queue = "btc"

## DOGE
[types.BalanceDecreasingTransaction.Sources.testDOGE]
url = ""
api_key = ""
lut_limit = "1209600"
queue = "doge"

## XRP
[types.BalanceDecreasingTransaction.Sources.testXRP]
url = ""
api_key = ""
lut_limit = "1209600"
queue = "xrp"

# ConfirmedBlockHeightExists
[types.ConfirmedBlockHeightExists]
abi_path = "configs/abis/ConfirmedBlockHeightExists.json"

## BTC
[types.ConfirmedBlockHeightExists.Sources.testBTC]
url = ""
api_key = ""
lut_limit = "1209600"
queue = "btc"

## DOGE
[types.ConfirmedBlockHeightExists.Sources.testDOGE]
url = ""
api_key = ""
lut_limit = "1209600"
queue = "doge"

## XRP
[types.ConfirmedBlockHeightExists.Sources.testXRP]
url = ""
api_key = ""
lut_limit = "1209600"
queue = "xrp"

# ReferencedPaymentNonexistence
[types.ReferencedPaymentNonexistence]
abi_path = "configs/abis/ReferencedPaymentNonexistence.json"

## BTC
[types.ReferencedPaymentNonexistence.Sources.testBTC]
url = ""
api_key = ""
lut_limit = "1209600"
queue = "btc"

## DOGE
[types.ReferencedPaymentNonexistence.Sources.testDOGE]
url = ""
api_key = ""
lut_limit = "1209600"
queue = "doge"

## XRP
[types.ReferencedPaymentNonexistence.Sources.testXRP]
url = ""
api_key = ""
lut_limit = "1209600"
queue = "xrp"


# AddressValidity
[types.AddressValidity]
abi_path = "configs/abis/AddressValidity.json"

## BTC
[types.AddressValidity.Sources.testBTC]
url = ""
api_key = ""
lut_limit = "18446744073709551615"
queue = "btc"

## DOGE
[types.AddressValidity.Sources.testDOGE]
url = ""
api_key = ""
lut_limit = "18446744073709551615"
queue = "doge"

## XRP
[types.AddressValidity.Sources.testXRP]
url = ""
api_key = ""
lut_limit = "18446744073709551615"
queue = "xrp"

# EVMTransaction
[types.EVMTransaction]
abi_path = "configs/abis/EVMTransaction.json"

## ETH
[types.EVMTransaction.Sources.testETH]
url = ""
api_key = ""
lut_limit = "18446744073709551615"
queue = "eth"

##SGB
[types.EVMTransaction.Sources.testSGB]
url = ""
api_key = ""
lut_limit = "18446744073709551615"
queue = "sgb"

##FLR
[types.EVMTransaction.Sources.testFLR]
url = ""
api_key = ""
lut_limit = "18446744073709551615"
queue = "flr"


# Queues
[queues.btc]
size = 10
max_dequeues_per_second = 0
max_workers = 0
max_attempts = 3
time_off = "2s"

[queues.doge]
size = 10
max_dequeues_per_second = 0
max_workers = 0
max_attempts = 3
time_off = "2s"

[queues.xrp]
size = 10
max_dequeues_per_second = 0
max_workers = 0
max_attempts = 3
time_off = "2s"

[queues.eth]
size = 10
max_dequeues_per_second = 0
max_workers = 0
max_attempts = 3
time_off = "2s"

[queues.sgb]
size = 10
max_dequeues_per_second = 0
max_workers = 0
max_attempts = 3
time_off = "2s"

[queues.flr]
size = 10
max_dequeues_per_second = 0
max_workers = 0
max_attempts = 3
time_off = "2s"

[metrics]
enabled = true